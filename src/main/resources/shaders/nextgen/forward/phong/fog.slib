#---VERTEX---#

@export {
    @provide vec4 position = modelView * vec4(position, 1.0);
}

#---END---#
#---FRAGMENT---#

@export {

    #define FOG_DISABLED -1
    #define FOG_LINEAR 0
    #define FOG_EXP 1
    #define FOG_EXP2 2

    struct Fog
    {
        vec4 color;
        float start;
        float end;
        float density;
        int mode;
    };

    float getFogFactor(Fog fog, float distance)
    {
        float factor = 0.0;

        if (fog.mode == FOG_DISABLED) {
            return 0;
        } else if (fog.mode == FOG_LINEAR) {
            factor = (fog.end - distance) / (fog.end - fog.start);
        } else if (fog.mode == FOG_EXP) {
            factor = exp(-fog.density * distance);
        } else if (fog.mode == FOG_EXP2) {
            factor = exp(-pow(fog.density * distance, 2.0));
        }

        return 1.0 - clamp(factor, 0.0, 1.0);
    }

    vec4 getFog(Fog fog, float distance)
    {
        if (fog.mode == FOG_DISABLED) {
            return vec4(1);
        }

        float factor = getFogFactor(fog, distance);

        factor = 1.0 - clamp(factor, 0.0, 1.0);

        return fog.color * vec4(factor);
    }

    @require Fog fog;

    @request vec4 position;

    vec4 get(vec4 color)
    {
        float fogCoord = abs(position.z/position.w);
        return mix(color, fog.color, getFogFactor(fog, fogCoord));
    }

}
#---END---#

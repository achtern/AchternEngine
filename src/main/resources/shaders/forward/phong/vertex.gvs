#version 330

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoord;
layout (location = 2) in vec3 normal;
layout (location = 3) in vec3 tangent;

out vec2 texCoord0;
out vec3 normal0;
out mat3 tbnMatrix;
out vec3 worldPos0;
out vec4 shadowMapCoords0;

out vec4 position0;

uniform mat4 model;
uniform mat4 modelView;
uniform mat4 MVP;
uniform mat4 shadowMatrix;

void main()
{
    gl_Position = MVP * vec4(position, 1.0);
    texCoord0 = texCoord;
    worldPos0 = (model * vec4(position, 1.0)).xyz;
    shadowMapCoords0 = shadowMatrix * vec4(position, 1.0);


    // Calculate tbnMatrix
    vec3 n = normalize((model * vec4(normal, 0.0)).xyz);
    vec3 t = normalize((model * vec4(tangent, 0.0)).xyz);
    t = normalize(t - dot(t, n) * n);
    vec3 biTangent = cross(t, n);
    tbnMatrix = mat3(t, biTangent, n);


    position0 = modelView * vec4(position, 1.0);
}
